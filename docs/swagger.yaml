basePath: /api
definitions:
  account.LoginRequest:
    properties:
      email:
        type: string
      password:
        minLength: 8
        type: string
      phone:
        description: phone number in e164 mode
        type: string
    required:
    - email
    - phone
    type: object
  account.ModifyUserRequest:
    properties:
      disable_sensitive_check:
        type: boolean
      email:
        type: string
      model_id:
        minimum: 1
        type: integer
      nickname:
        minLength: 1
        type: string
      phone:
        description: phone number in e164 mode
        type: string
      plugin_config:
        additionalProperties:
          type: boolean
        type: object
      share_consent:
        type: boolean
      verification:
        maxLength: 6
        minLength: 6
        type: string
    required:
    - email
    - phone
    type: object
  account.RegisterRequest:
    properties:
      email:
        type: string
      invite_code:
        minLength: 1
        type: string
      password:
        minLength: 8
        type: string
      phone:
        description: phone number in e164 mode
        type: string
      verification:
        maxLength: 6
        minLength: 6
        type: string
    required:
    - email
    - phone
    type: object
  account.TokenResponse:
    properties:
      access:
        type: string
      message:
        type: string
      refresh:
        type: string
    type: object
  account.VerifyResponse:
    properties:
      message:
        type: string
      scope:
        enum:
        - register
        - reset
        type: string
    type: object
  chat.ModifyModel:
    properties:
      name:
        minLength: 1
        type: string
    type: object
  config.ModelConfigRequest:
    properties:
      description:
        type: string
      id:
        minimum: 1
        type: integer
      inner_thoughts_postprocess:
        enum:
        - true
        - false
        type: boolean
    type: object
  config.ModifyModelConfigRequest:
    properties:
      invite_required:
        enum:
        - true
        - false
        type: boolean
      model_config:
        items:
          $ref: '#/definitions/config.ModelConfigRequest'
        type: array
      notice:
        type: string
      offense_check:
        enum:
        - true
        - false
        type: boolean
    type: object
  config.Response:
    properties:
      default_plugin_config:
        additionalProperties:
          type: boolean
        type: object
      invite_required:
        type: boolean
      notice:
        type: string
      region:
        type: string
    type: object
  models.Chat:
    properties:
      count:
        description: Record 条数
        type: integer
      created_at:
        type: string
      id:
        type: integer
      max_length_exceeded:
        type: boolean
      name:
        type: string
      records:
        items:
          $ref: '#/definitions/models.Record'
        type: array
      updated_at:
        type: string
      user_id:
        type: integer
    type: object
  models.Map:
    additionalProperties: {}
    type: object
  models.Record:
    properties:
      chat_id:
        type: integer
      created_at:
        type: string
      duration:
        description: 处理时间，单位 s
        type: number
      feedback:
        type: string
      id:
        type: integer
      like_data:
        description: 1 like, -1 dislike
        type: integer
      processed_extra_data: {}
      request:
        type: string
      request_sensitive:
        type: boolean
      response:
        type: string
      response_sensitive:
        type: boolean
    type: object
  models.User:
    properties:
      banned:
        type: boolean
      chats:
        items:
          $ref: '#/definitions/models.Chat'
        type: array
      disable_sensitive_check:
        type: boolean
      email:
        type: string
      id:
        type: integer
      is_admin:
        type: boolean
      joined_time:
        type: string
      last_login:
        type: string
      model_id:
        default: 1
        type: integer
      nickname:
        type: string
      phone:
        type: string
      plugin_config:
        additionalProperties:
          type: boolean
        type: object
      share_consent:
        type: boolean
    type: object
  record.CreateModel:
    properties:
      request:
        type: string
    required:
    - request
    type: object
  record.InferenceRequest:
    properties:
      context:
        type: string
      plugin_config:
        additionalProperties:
          type: boolean
        type: object
      request:
        minLength: 1
        type: string
    type: object
  record.InferenceResponse:
    properties:
      context:
        type: string
      extra_data: {}
      response:
        type: string
    type: object
  record.ModifyModel:
    properties:
      feedback:
        type: string
      like:
        description: 1 like, -1 dislike, 0 reset
        enum:
        - 1
        - 0
        - -1
        type: integer
    type: object
  utils.MessageResponse:
    properties:
      data: {}
      message:
        type: string
    type: object
host: localhost:8000
info:
  contact:
    email: dev@fduhole.com
    name: Maintainer Chen Ke
    url: https://danxi.fduhole.com/about
  description: Moss Backend
  license:
    name: Apache 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0.html
  title: Moss Backend
  version: 0.0.1
paths:
  /:
    get:
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Map'
  /chats:
    get:
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Chat'
            type: array
      summary: list user's chats
      tags:
      - chat
    post:
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.Chat'
      summary: add a chat
      tags:
      - chat
  /chats/{chat_id}:
    delete:
      parameters:
      - description: chat id
        in: path
        name: chat_id
        required: true
        type: integer
      responses:
        "204":
          description: No Content
      summary: delete a chat
      tags:
      - chat
    put:
      parameters:
      - description: chat id
        in: path
        name: chat_id
        required: true
        type: integer
      - description: json
        in: body
        name: json
        required: true
        schema:
          $ref: '#/definitions/chat.ModifyModel'
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Chat'
      summary: modify a chat
      tags:
      - chat
  /chats/{chat_id}/records:
    get:
      parameters:
      - description: chat id
        in: path
        name: chat_id
        required: true
        type: integer
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Record'
            type: array
      summary: list records of a chat
      tags:
      - record
    post:
      parameters:
      - description: chat id
        in: path
        name: chat_id
        required: true
        type: integer
      - description: json
        in: body
        name: json
        required: true
        schema:
          $ref: '#/definitions/record.CreateModel'
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.Record'
      summary: add a record
      tags:
      - record
  /chats/{chat_id}/regenerate:
    put:
      parameters:
      - description: chat id
        in: path
        name: chat_id
        required: true
        type: integer
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Record'
      summary: regenerate the last record of a chat
      tags:
      - record
  /chats/{chat_id}/screenshots:
    get:
      parameters:
      - description: chat id
        in: path
        name: chat_id
        required: true
        type: integer
      produces:
      - image/png
      responses:
        "200":
          description: OK
      summary: screenshot of a chat
      tags:
      - record
  /config:
    get:
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/config.Response'
      summary: get global config
      tags:
      - Config
    patch:
      consumes:
      - application/json
      parameters:
      - description: body
        in: body
        name: json
        required: true
        schema:
          $ref: '#/definitions/config.ModifyModelConfigRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/config.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/config.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/config.Response'
      summary: update global config
      tags:
      - Config
  /inference:
    post:
      parameters:
      - description: json
        in: body
        name: json
        required: true
        schema:
          $ref: '#/definitions/record.InferenceRequest'
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/record.InferenceResponse'
      summary: infer without login
      tags:
      - Inference
  /login:
    post:
      consumes:
      - application/json
      description: Login with email and password, return jwt token, not need jwt
      parameters:
      - description: json
        in: body
        name: json
        required: true
        schema:
          $ref: '#/definitions/account.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/account.TokenResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.MessageResponse'
        "404":
          description: User Not Found
          schema:
            $ref: '#/definitions/utils.MessageResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.MessageResponse'
      summary: Login
      tags:
      - token
  /logout:
    get:
      description: Logout, clear jwt credential and return successful message, logout,
        login required
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.MessageResponse'
      summary: Logout
      tags:
      - token
  /records/{record_id}:
    put:
      parameters:
      - description: record id
        in: path
        name: record_id
        required: true
        type: integer
      - description: json
        in: body
        name: json
        required: true
        schema:
          $ref: '#/definitions/record.ModifyModel'
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.Record'
      summary: modify a record
      tags:
      - record
  /refresh:
    post:
      description: Refresh jwt token with refresh token in header, login required
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/account.TokenResponse'
      summary: Refresh jwt token
      tags:
      - token
  /register:
    post:
      consumes:
      - application/json
      description: register with email or phone, password and verification code
      parameters:
      - description: json
        in: body
        name: json
        required: true
        schema:
          $ref: '#/definitions/account.RegisterRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/account.TokenResponse'
        "400":
          description: 验证码错误、用户已注册
          schema:
            $ref: '#/definitions/utils.MessageResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.MessageResponse'
      summary: register
      tags:
      - account
    put:
      consumes:
      - application/json
      description: reset password, reset jwt credential
      parameters:
      - description: json
        in: body
        name: json
        required: true
        schema:
          $ref: '#/definitions/account.RegisterRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/account.TokenResponse'
        "400":
          description: 验证码错误
          schema:
            $ref: '#/definitions/utils.MessageResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.MessageResponse'
      summary: reset password
      tags:
      - account
  /users/me:
    delete:
      description: delete user and related jwt credentials
      parameters:
      - description: email, password
        in: body
        name: json
        required: true
        schema:
          $ref: '#/definitions/account.LoginRequest'
      responses:
        "204":
          description: No Content
        "400":
          description: 密码错误“
          schema:
            $ref: '#/definitions/utils.MessageResponse'
        "404":
          description: 用户不存在“
          schema:
            $ref: '#/definitions/utils.MessageResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.MessageResponse'
      summary: delete user
      tags:
      - account
    get:
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.User'
        "404":
          description: User not found
          schema:
            $ref: '#/definitions/utils.MessageResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.MessageResponse'
      summary: get current user
      tags:
      - user
    put:
      parameters:
      - description: json
        in: body
        name: json
        required: true
        schema:
          $ref: '#/definitions/account.ModifyUserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.User'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.MessageResponse'
      summary: modify user, need login
      tags:
      - user
  /verify/email:
    get:
      description: verify with email in query, Send verification email
      parameters:
      - in: query
        name: email
        required: true
        type: string
      - in: query
        minLength: 1
        name: invite_code
        type: string
      - enum:
        - register
        - reset
        - modify
        in: query
        name: scope
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/account.VerifyResponse'
        "400":
          description: 已注册“
          schema:
            $ref: '#/definitions/utils.MessageResponse'
      summary: verify with email in query
      tags:
      - account
  /verify/phone:
    get:
      description: verify with phone in query, Send verification message
      parameters:
      - in: query
        minLength: 1
        name: invite_code
        type: string
      - description: phone number in e164 mode
        in: query
        name: phone
        required: true
        type: string
      - enum:
        - register
        - reset
        - modify
        in: query
        name: scope
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/account.VerifyResponse'
        "400":
          description: 已注册“
          schema:
            $ref: '#/definitions/utils.MessageResponse'
      summary: verify with phone in query
      tags:
      - account
  /ws/chats/{chat_id}/records:
    get:
      parameters:
      - description: chat id
        in: path
        name: chat_id
        required: true
        type: integer
      - description: json
        in: body
        name: json
        required: true
        schema:
          $ref: '#/definitions/record.CreateModel'
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.Record'
      summary: add a record
      tags:
      - Websocket
  /ws/chats/{chat_id}/regenerate:
    get:
      parameters:
      - description: chat id
        in: path
        name: chat_id
        required: true
        type: integer
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.Record'
      summary: regenerate a record
      tags:
      - Websocket
  /ws/inference:
    get:
      parameters:
      - description: json
        in: body
        name: json
        required: true
        schema:
          $ref: '#/definitions/record.InferenceRequest'
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/record.InferenceResponse'
      summary: infer without login in websocket
      tags:
      - Websocket
swagger: "2.0"
